{"ast":null,"code":"var _jsxFileName = \"/Users/katiashteyn/Programming/Web Dev/Mini-Projects/snake-game/client/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './styles/Game.css';\nimport { useNavigate } from 'react-router-dom';\nimport { usePlayer } from '../PlayerContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [snake, setSnake] = useState([{\n    x: 0,\n    y: 0\n  }]); // Snake initial position\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  }); // Food initial position\n  const [direction, setDirection] = useState('RIGHT');\n  const [gameOver, setGameOver] = useState(false);\n  const navigate = useNavigate();\n  const {\n    playerId\n  } = usePlayer();\n  const [score, setScore] = useState(0); // Assuming you have a way to calculate the score\n\n  const apiPath = 'http://localhost:3001/players';\n  const moveSnake = useCallback(() => {\n    if (gameOver) {\n      return; // Stop moving the snake if the game is over\n    }\n    setSnake(snake => {\n      let newSnake = [...snake];\n      let head = {\n        ...newSnake[0]\n      };\n\n      // Update the head position based on direction\n      if (direction === 'RIGHT') head.x += 1;else if (direction === 'LEFT') head.x -= 1;else if (direction === 'UP') head.y -= 1;else if (direction === 'DOWN') head.y += 1;\n\n      // Check for collisions\n      const collision = checkCollision(head);\n      if (collision) {\n        return [{\n          x: 0,\n          y: 0\n        }]; // Reset the snake\n      }\n\n      // Check if food is eaten\n      const foodEaten = eatFood(head);\n      if (!foodEaten) {\n        newSnake.pop(); // Remove tail only if food not eaten\n      }\n      newSnake.unshift(head); // Add new head\n\n      return newSnake;\n    });\n  }, [direction, snake, food]);\n  const getRandomCoordinates = () => {\n    const min = 1;\n    const max = 18;\n    const x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    const y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    return {\n      x,\n      y\n    };\n  };\n  const eatFood = head => {\n    if (head.x === food.x && head.y === food.y) {\n      // Reposition food\n      setFood(getRandomCoordinates());\n      setScore(currentScore => currentScore + 0.5); // Increment score\n      return true; // Indicate the food was eaten\n    }\n    return false;\n  };\n  const checkCollision = head => {\n    // Check boundary collision\n    var gO = false;\n    gO = head.x >= 20 || head.x < 0 || head.y >= 20 || head.y < 0;\n    if (!gO) {\n      // Check self collision\n      for (const segment of snake) {\n        gO = head.x === segment.x && head.y === segment.y;\n        if (gO) break;\n      }\n    }\n    if (gO) {\n      setGameOver(true); // Set game over state\n    }\n    return gO;\n  };\n\n  // Function to navigate back to the menu\n  const backToMenu = () => {\n    navigate('/menu'); // Replace '/menu' with the actual route to your Menu component\n  };\n  const GameOverModal = ({\n    show,\n    onRestart,\n    onBackToMenu\n  }) => {\n    if (!show) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onRestart,\n          children: \"Restart Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onBackToMenu,\n          children: \"Back to Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  };\n  const resetGame = () => {\n    setSnake([{\n      x: 0,\n      y: 0\n    }]); // Reset snake position\n    setFood(getRandomCoordinates()); // Reposition food\n    setDirection('RIGHT'); // Reset direction\n    setGameOver(false); // Reset game over state\n    setScore(0); // Reset score\n  };\n  const sendScoreToAPI = async () => {\n    if (playerId) {\n      try {\n        const response = await fetch(`http://localhost:3001/players/${playerId}/scores`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            score\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error('Error updating score:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    let gameLoop;\n    if (!gameOver) {\n      // Only start the game loop if the game is not over\n      gameLoop = setInterval(moveSnake, 200); // Adjust the interval as per your game speed\n    }\n    return () => {\n      // Clear the interval when the component unmounts or the game is over\n      clearInterval(gameLoop);\n    };\n  }, [moveSnake, gameOver]);\n  useEffect(() => {\n    if (gameOver) {\n      sendScoreToAPI();\n    }\n  }, [gameOver, sendScoreToAPI]);\n\n  // Handle key press for snake direction\n  useEffect(() => {\n    const handleKeyPress = e => {\n      switch (e.keyCode) {\n        case 37:\n          // Left arrow\n          setDirection('LEFT');\n          break;\n        case 38:\n          // Up arrow\n          setDirection('UP');\n          break;\n        case 39:\n          // Right arrow\n          setDirection('RIGHT');\n          break;\n        case 40:\n          // Down arrow\n          setDirection('DOWN');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: backToMenu,\n      className: \"back-to-menu\",\n      children: \"Back to Menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-board\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [snake.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"snake-segment\",\n        style: {\n          left: `${segment.x * 20}px`,\n          top: `${segment.y * 20}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"food\",\n        style: {\n          left: `${food.x * 20}px`,\n          top: `${food.y * 20}px`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameOverModal, {\n      show: gameOver,\n      onRestart: resetGame,\n      onBackToMenu: backToMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"oR84RT/p0iUEYQVsRFi7HEraEjM=\", false, function () {\n  return [useNavigate, usePlayer];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","usePlayer","jsxDEV","_jsxDEV","Game","_s","snake","setSnake","x","y","food","setFood","direction","setDirection","gameOver","setGameOver","navigate","playerId","score","setScore","apiPath","moveSnake","newSnake","head","collision","checkCollision","foodEaten","eatFood","pop","unshift","getRandomCoordinates","min","max","Math","floor","random","currentScore","gO","segment","backToMenu","GameOverModal","show","onRestart","onBackToMenu","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","resetGame","sendScoreToAPI","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","error","console","gameLoop","setInterval","clearInterval","handleKeyPress","e","keyCode","document","addEventListener","removeEventListener","map","index","style","left","top","_c","$RefreshReg$"],"sources":["/Users/katiashteyn/Programming/Web Dev/Mini-Projects/snake-game/client/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './styles/Game.css'\nimport { useNavigate } from 'react-router-dom';\nimport { usePlayer } from '../PlayerContext';\n\nconst Game = () => {\n  const [snake, setSnake] = useState([{ x: 0, y: 0 }]); // Snake initial position\n  const [food, setFood] = useState({ x: 5, y: 5 }); // Food initial position\n  const [direction, setDirection] = useState('RIGHT');\n  const [gameOver, setGameOver] = useState(false);\n  const navigate = useNavigate();\n\n  const { playerId } = usePlayer();\n  const [score, setScore] = useState(0); // Assuming you have a way to calculate the score\n\n  const apiPath = 'http://localhost:3001/players';\n\n  const moveSnake = useCallback(() => {\n    if (gameOver) {\n      return; // Stop moving the snake if the game is over\n    }\n\n    setSnake(snake => {\n      let newSnake = [...snake];\n      let head = { ...newSnake[0] };\n  \n      // Update the head position based on direction\n      if (direction === 'RIGHT') head.x += 1;\n      else if (direction === 'LEFT') head.x -= 1;\n      else if (direction === 'UP') head.y -= 1;\n      else if (direction === 'DOWN') head.y += 1;\n  \n      // Check for collisions\n      const collision = checkCollision(head);\n      if (collision) {\n        return [{ x: 0, y: 0 }]; // Reset the snake\n      }\n  \n      // Check if food is eaten\n      const foodEaten = eatFood(head);\n      if (!foodEaten) {\n        newSnake.pop(); // Remove tail only if food not eaten\n      }\n  \n      newSnake.unshift(head); // Add new head\n  \n      return newSnake;\n    });\n  }, [direction, snake, food]);\n\n  const getRandomCoordinates = () => {\n    const min = 1;\n    const max = 18;\n    const x = Math.floor((Math.random() * (max-min+1) + min) / 2) * 2;\n    const y = Math.floor((Math.random() * (max-min+1) + min) / 2) * 2;\n    return { x, y };\n  };\n  \n  const eatFood = (head) => {\n    if (head.x === food.x && head.y === food.y) {\n      // Reposition food\n      setFood(getRandomCoordinates());\n      setScore(currentScore => currentScore + 0.5); // Increment score\n      return true; // Indicate the food was eaten\n    }\n    return false;\n  };\n\n  const checkCollision = head => {\n    // Check boundary collision\n    var gO = false;\n    gO = head.x >= 20 || head.x < 0 || head.y >= 20 || head.y < 0\n   \n    if (!gO) {\n      // Check self collision\n      for (const segment of snake) {\n        gO = head.x === segment.x && head.y === segment.y\n        if (gO) break;\n      }\n    }\n\n    if (gO) {\n      setGameOver(true); // Set game over state\n    }\n    \n    return gO;\n  };\n\n  // Function to navigate back to the menu\n  const backToMenu = () => {\n    navigate('/menu'); // Replace '/menu' with the actual route to your Menu component\n  };\n\n  const GameOverModal = ({ show, onRestart, onBackToMenu }) => {\n    if (!show) return null;\n\n    return (\n      <div className=\"modal-overlay\">\n        <div className=\"modal-content\">\n          <h2>Game Over</h2>\n          <button onClick={onRestart}>Restart Game</button>\n          <button onClick={onBackToMenu}>Back to Menu</button>\n        </div>\n      </div>\n    );\n  };\n\n  \n  const resetGame = () => {\n    setSnake([{ x: 0, y: 0 }]); // Reset snake position\n    setFood(getRandomCoordinates()); // Reposition food\n    setDirection('RIGHT'); // Reset direction\n    setGameOver(false); // Reset game over state\n    setScore(0); // Reset score\n  };\n\n  const sendScoreToAPI = async () => {\n    if (playerId) {\n      try {\n        const response = await fetch(`http://localhost:3001/players/${playerId}/scores`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ score }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n      } catch (error) {\n        console.error('Error updating score:', error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let gameLoop;\n\n    if (!gameOver) {\n      // Only start the game loop if the game is not over\n      gameLoop = setInterval(moveSnake, 200); // Adjust the interval as per your game speed\n    } \n\n    return () => {\n      // Clear the interval when the component unmounts or the game is over\n      clearInterval(gameLoop);\n    };\n\n  }, [moveSnake, gameOver]);\n\n  useEffect(() => {\n    if (gameOver) {\n      sendScoreToAPI();\n    }\n  }, [gameOver, sendScoreToAPI]);\n  \n\n  // Handle key press for snake direction\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      switch (e.keyCode) {\n        case 37: // Left arrow\n          setDirection('LEFT');\n          break;\n        case 38: // Up arrow\n          setDirection('UP');\n          break;\n        case 39: // Right arrow\n          setDirection('RIGHT');\n          break;\n        case 40: // Down arrow\n          setDirection('DOWN');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, []);\n  \n  return (\n    <div>\n      <h1>Snake Game</h1>\n      <button onClick={backToMenu} className=\"back-to-menu\">Back to Menu</button>\n      <div className=\"score-board\">\n        Score: {score}\n      </div>\n      <div className=\"game-area\">\n        {snake.map((segment, index) => (\n          <div key={index} className=\"snake-segment\" style={{ left: `${segment.x * 20}px`, top: `${segment.y * 20}px` }} />\n        ))}\n        <div className=\"food\" style={{ left: `${food.x * 20}px`, top: `${food.y * 20}px` }} />\n      </div>\n      <GameOverModal show={gameOver} onRestart={resetGame} onBackToMenu={backToMenu} />\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}